1.使用nginx 操作命令前提条件：必须进入nginx的目录  /usr/local/nginx/sbin

2.查看nginx的版本号
    ./nginx -v

3.启动nginx
./nginx


4.关闭nginx
 ./nginx -s stop


5.重新加载nginx
  ./nginx -s reload


nginx 的配置文件
 
 1.nginx配置文件的位置
    /usr/local/nginx/conf/nginx.conf  

2.nginx配置文件的组成
   (1)全局快
     从配置文件开始到events块之间的内容，主要会设置一些影响nginx服务器整体运行的配置指令，主要包括配置运行
  nginx服务器的用户(组)、允许生成的worker process 数，进程PID存放路径、日志存放路径和类型以及配置文件的引入等  
    
例如 
   work_processe 1; 
    这是Nginx服务器并发处理服务的关键配置，work_processes值越大，可以支持的并发处理量也越多，但是受到硬件、软件等设备的制约
  

   (2)events块
     events块设计的指令主要影响nginx服务器与用户的网络连接，常用的设置包括是否开启对多work process下的网络连接进行序列化，是否允许
  同时接收多个网络连接，选取哪种事件驱动模型来处理连接请求，每个word process可以同时支持的最大连接数等。
    work_connections 1024    
   
上述例子就表示每个work process 支持的最大连接数为1024
       这部分的配置对nginx的性能影响较大，在实际中应该灵活配置



    (3)http块
      这是nginx服务器中配置中最频繁的部分、代理、缓存和日志定义等绝大多数功能和第三方模块的配置都在这里。
    需要注意的是：http块也可以包括http全局块，server块

   
     ①http全局块
      http 全局块配置的指令包括文件引入、MIME-TYPE定义、日志自定义、连接超时时间、单链接请求数上限等
   
   ②  server块
     这块和虚拟主机有密切关系，虚拟主机从用户角度看，和一台独立的硬件主机是完全一样的，该技术的产生是为了节省互联网服务器硬件成本

     每个http块可以包括多个server块，而每个server块就相当于一个虚拟主机
      而每个server块也分为全局块。以及可以同时包含多个location块。

    1.全局server块
     最常见的配置是本虚拟机主机的监听配置和本虚拟主机的名称或IP配置
     
   2.location块
     一个server块可以配置多个location块
    这块的主要作用是基于nginx服务器接收到的请求字符串（例如server_name/uri-string），对虚拟主机名称（也可以是IP别名）之外的字符串
  （例如前面的/uri-string）进行匹配，对特定的请求进行处理。地址定向，数据缓存和应答控制等功能，还有许多第三方模块的配置也在这里进行。
     
nginx配置实例1 -反向代理
    1.实现效果
    (1)打开浏览器，在浏览器地址栏输入地址www.123.com，跳转到linux系统tomcat主页面中
       
    windows浏览器                                nginx                              tomcat
      www.123.com ---------------------> 192.168.246.131:80 ------------------------->192.168.246.131:8080
   1.windows的host文件进行配置
   配置域名映射的ip地址                  
   
   2.nginx.conf 文件的配置
      server {
        listen       80;
        server_name  192.168.246.131;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            proxy_pass  http://192.168.246.131:8080;
            index  index.html index.htm;
        }
 
  修改如上，修改成功后如果nginx正在运行，切换到nginx的sbin目录输入 ./nginx -s reload
    
	3.在浏览器地址栏输入地址www.123.com验证效果
    
  nginx 配置实例-反向代理实例2
    
	1.实现效果
	  使用Nginx 反向代理，根据访问的路径跳转到不同端口的服务中
	    nginx 监听端口为9001
         
		 访问http://127.0.0.1:9001/edu/ 直接跳转到127.0.0.1:8080
		 访问http://127.0.0.1:9001/vod/ 直接跳转到127.0.0.1:8081

  2.准备工作
     (1)准备两个tomcat服务器，一个8080端口，一个8081端口
	 (2)创建文件夹和测试页面
	    分别在两个tomcat的/webapp目录下创建edu和vod文件夹，并在里面放入html文件
		确保可以访问具体的html文件
		
  3.具体配置	
      
     (1)找到nginx配置文件，进行反向代理配置
	  server {
        listen       9001;
        server_name  192.168.246.131;

        location ~ /edu/ {
            proxy_pass http://192.168.246.131:8080;
        }

         location ~ /vod/ {
            proxy_pass http://192.168.246.131:8081;
        }

    }
	
	 (2)开放对外访问的端口号  9001 8080 8081
	 sudo firewall-cmd --add-port=9001/tcp --permanent  
	 sudo firewall-cmd --reload
	  
	  4.最终测试
	  浏览器访问192.168.246.131:9001/edu/a.html
	
	
	location指令说明
	  该指令用于匹配url
	   语法如下:
	     location [ = | ~ ~* | ^~] uri {
		 
		 }
	  1. =: 用于不含正则表达式的uri前，要求请求字符串与uri严格匹配，如果匹配成功，就停止继续向下搜索
	   并立即处理该请求。
	  
	  2. ~: 用于表示uri包含正则表达式，并且区分大小写。
	  
	  3. ~*： 用于表示uri包含正则表达式，并且不区分大小写
	  
	  4. ^~: 用于不含正则表达式的uri前，要求nginx服务器找到标识uri和请求字符串匹配度最高的location后，
	    立即使用此location处理请求，而不再使用location块中的正则uri和请求字符串做匹配。
		 
		 注意：如果uri包含正则表达式，则必须要有~或者~*标识。
		 
  

  Nginx 配置实例-负载均衡
    1.实现效果
	  （1）浏览器地址栏输入地址http://192.168.246.131/edu/a.html，负载均衡效果。
	    平均8080和8081端口中.
		 
	2.准备工作
	  （1）准备两个tomcat服务器，一个8080端口，一个8081端口
	  
	  （2）在两台tomcat里面webapps目录中，创建名称是edu文件夹，在edu文件夹中创建页面a.html
	    用于测试
		
	   (3)在nginx.conf中进行配置
	       upstream myserver {
       server 192.168.246.131:8080;
       server 192.168.246.131:8081;
        }
		
		server {
        listen       80;
        server_name  192.168.246.131;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            proxy_pass  http://myserver;
            index  index.html index.htm;
        }


   nginx提供的负载均衡的分配策略
     1.轮询（默认）
	   每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除
	   
	 2.weight
	   weight代表权重，默认为1，权重越高，被分配的客户端越多
	     
     3.ip_hash
	   每个请求按访问的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题.
	  例如：
	    upstream server_pool {
		 ip_hash;
		 server 192.168.246.131:80;
		 server 192.168.246.136:80;
		
		}
	
	 4.fair（第三方）
	  按后端服务器的响应时间来分配请求，响应时间短的优先分配
	  upstream server_pool {
	   server 192.168.246.131:80;
	   server 192.168.246.136:80;
	   fair;
	  }
	
	 nginx 配置实例-动静分离
	   
	   nginx 动静分离简单来说就是把动态和静态请求分开，可以理解成使用nginx处理静态页面，
	   tomcat处理动态页面。
	   动静分离从目前实现角度来讲大致分为两种
	   一种是纯粹把静态文件独立成单独的域名，放在独立的服务器上，也是目前主流推崇的方案；
	   另一种方法就是动态跟静态文件混合在一起发布，通过nginx来分开
	   通过location指定不同的后缀名实现不同的请求转发。通过expires参数设置，可以使浏览器
	   缓存过期时间，减少与服务器之间的请求和流量。
	   具体expires定义：是给一个资源设定一个过期时间，也就是说无需去服务端验证，直接通过
	   浏览器自身确认是否过期即可，所以不会产生额外的流量。此种方法非常适合不经常变动的资源。
	   
	2.准备工作
       
     （1）在linux系统中准备静态资源，用于进行访问

      （2）具体配置
       在nginx配置文件中进行配置
	    
  	      server {
        listen       80;
        server_name  192.168.246.131;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location /www/ {
            root   /data/;
            index  index.html index.htm;
        }

        location /image/ {
            root /data/;
            autoindex  on;

}



  nginx配置高可用的集群
    
	1.什么是高可用
	  
	  （1）需要两台nginx服务器
	   （2）需要keepalived
	    （3）需要虚拟ip
		
    2.配置高可用的准备工作
	  (1)需要两台服务器 192.168.246.131  192.168.246.136
	   (2)在两台服务器安装nginx
	    （3）在两台服务器安装keepalived
	       yum install keepalived -y   查看版本 rpm -q -a keepalived
		   安装之后，在etc里面生成目录keepalived,有文件keepalived.conf
		   keepalived启动命令   systemctl start keepalived.service
		   
    3.完成高可用配置（主从配置）
	  (1).通过修改配置文件来实现
	  	 global_defs {
   notification_email {
     acassen@firewall.loc
     failover@firewall.loc
     sysadmin@firewall.loc
   }
   notification_email_from Alexandre.Cassen@firewall.loc
   smtp_server 192.168.200.1
   smtp_connect_timeout 30
   router_id LVS_DEVEL
}

vrrp_script chk_http_port {
    
	 script "/usr/local/src/nginx_check.sh"
	 
	 interval 2  #(检测脚本执行的间隔)
	 weight  2
}


vrrp_instance VI_1 {
    state BACKUP   #备份服务器上将MASTER改为BACKUP
    interface ens33   //网卡
    virtual_router_id 51   #主、备机的virtual_router_id必须相同
    priority 90   #主、备机取不同的优先级，主机值较大，备份机值较小
    advert_int 1
    authentication {
        auth_type PASS
        auth_pass 1111
    }
    virtual_ipaddress {
        192.168.200.16    //VRRP H虚拟地址
        192.168.200.17
        192.168.200.18
    }
}
  (2)在/usr/local/src添加检测脚本
  #!/bin/bash
A='ps -C nginx -no-header |wc -l'
if [ $A -eq 0 ];then
   /usr/local/nginx/sbin/nginx
    sleep 2
	if [ 'ps -C nginx --no-header |wc -l' -eq 0 ];then
	      killall keepalived
    fi
fi



		   
       
